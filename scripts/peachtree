#!/usr/bin/env python

import argparse
import json

import peachtree
from peachtree import machine_description


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--qemu-data-dir", help=argparse.SUPPRESS)
    subparsers = parser.add_subparsers()
    
    for command_name, command_builder in _commands.iteritems():
        command = command_builder()
        subparser = subparsers.add_parser(command_name)
        subparser.set_defaults(func=command.execute)
        command.create_parser(subparser)
    
    args = parser.parse_args()
    provider = peachtree.qemu_provider(data_dir=args.qemu_data_dir)
    args.func(provider, args)


class RunCommand(object):
    def create_parser(self, subparser):
        subparser.add_argument('image')
    
    def execute(self, provider, args):
        machine = provider.start(args.image)
        description = machine_description.describe_machine(machine)
        print json.dumps(description, indent=4)


class ListCommand(object):
    def create_parser(self, subparser):
        pass
    
    def execute(self, provider, args):
        machines = provider.list_running_machines()
        for machine in machines:
            print machine.identifier, machine.image_name
            
            
class StopCommand(object):
    def create_parser(self, subparser):
        subparser.add_argument('identifier')
    
    def execute(self, provider, args):
        machine = provider.find_running_machine(args.identifier)
        machine.destroy()
        
            
class CronCommand(object):
    def create_parser(self, subparser):
        pass
    
    def execute(self, provider, args):
        provider.cron()


class PublicPortCommand(object):
    def create_parser(serlf, subparser):
        subparser.add_argument('identifier')
        subparser.add_argument("port", type=int)
    
    def execute(self, provider, args):
        machine = provider.find_running_machine(args.identifier)
        print machine.public_port(args.port)
        

        
_commands = {
    "run": RunCommand,
    "list-running": ListCommand,
    "stop": StopCommand,
    "cron": CronCommand,
    "public-port": PublicPortCommand,
}

if __name__ == "__main__":
    main()
